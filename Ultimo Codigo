Option Explicit

'==============================================
'======== VARIABLES GLOBALES ==================
'==============================================
Private g_Config As Object
Private g_ConfigAbrev As Object ' Diccionario para buscar por Abreviatura

'==============================================
'======== MACRO PRINCIPAL =====================
'==============================================
Public Sub GenerarReporteSemanal()
    'Cargar la configuración al inicio. Si falla, no se puede continuar.
    If Not LoadConfiguration() Then Exit Sub

    'Declaración de hojas usando los nombres de la configuración.
    Dim wsBase As Worksheet, wsInc As Worksheet, wsPrest As Worksheet, wsRep As Worksheet, wsBanco As Worksheet
    On Error Resume Next
    Set wsBase = Worksheets(g_Config("SH_BASE"))
    Set wsInc = Worksheets(g_Config("SH_INC"))
    Set wsPrest = Worksheets(g_Config("SH_PREST"))
    Set wsRep = Worksheets(g_Config("SH_REP"))
    Set wsBanco = Worksheets(g_Config("SH_BANCO"))
    On Error GoTo 0

    'Verificar que todas las hojas existen.
    If wsBase Is Nothing Or wsInc Is Nothing Or wsPrest Is Nothing Or wsRep Is Nothing Or wsBanco Is Nothing Then
        MsgBox "Error: Una o más hojas de trabajo requeridas no se encontraron. Verifica los nombres en la hoja 'Config'.", vbCritical
        Exit Sub
    End If

    'Optimización de rendimiento de Excel.
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    On Error GoTo salida_segura

    '1) Semana y año
    Dim semanaNum As Long, anioSel As Long, tmp As String
    Do
        tmp = InputBox("Ingresa el NÚMERO de semana (1-53):", "Semana", Application.WorksheetFunction.weekNum(Date, 2))
        If Len(Trim$(tmp)) = 0 Then GoTo salida_segura ' User cancelled
        If IsNumeric(tmp) Then
            semanaNum = CLng(tmp)
            If semanaNum >= 1 And semanaNum <= 53 Then Exit Do
        End If
        MsgBox "Por favor, ingresa un número de semana válido (entre 1 y 53).", 48, "Entrada no válida"
    Loop

    tmp = InputBox("Ingresa el AÑO (4 dígitos).", "Año", Year(Date))
    If Len(Trim$(tmp)) = 0 Or Not IsNumeric(tmp) Then GoTo salida_segura
    anioSel = CLng(tmp)

    '2) Fechas de la semana
    Dim mondayDate As Date, sundayDate As Date
    mondayDate = MondayOfISOWeek(semanaNum, anioSel)
    sundayDate = mondayDate + 6

    '3) Encabezados
    PrepararEncabezado wsRep, semanaNum, mondayDate
    wsRep.Columns(g_Config("COL_BONO")).NumberFormat = "0"

    '4) Acopios en memoria
    Dim incArr As Variant: incArr = RangoDatos(wsInc)
    
    '--- LÓGICA DE HISTÓRICO Y LIMPIEZA ---
    EnsureHistoricoSheet 'Asegura que la hoja 'historico_incidencias' exista
    ActualizarHistoricoIncidencias incArr, semanaNum, anioSel 'Archiva solo incidencias reales
    LimpiarIncidenciasPasadas wsInc, mondayDate 'Limpia inteligentemente, protegiendo fórmula y sábado
    '--- FIN LÓGICA ---

    Dim dictPrest As Object: Set dictPrest = MapaPrestamos(wsPrest)

    '5) Limpiar reporte previo
    wsRep.Range(wsRep.Cells(2, 1), wsRep.Cells(wsRep.Rows.count, g_Config("COL_SEMANA_HDR"))).ClearContents
    wsRep.Cells(1, g_Config("COL_SEMANA_HDR")).Value = "Semana " & semanaNum

    '6) ¿Semana cruza de mes?
    Dim esPrimeraSemanaMesNuevo As Boolean
    esPrimeraSemanaMesNuevo = (Month(mondayDate) <> Month(sundayDate))
    Dim mesAnterior As Long, anioAnterior As Long
    If esPrimeraSemanaMesNuevo Then
        If Month(sundayDate) = 1 Then
            mesAnterior = 12
            anioAnterior = Year(sundayDate) - 1
        Else
            mesAnterior = Month(sundayDate) - 1
            anioAnterior = Year(sundayDate)
        End If
    Else
        ' Si no es cruce de mes, el mes anterior es el mes del lunes
        If Month(mondayDate) = 1 Then
            mesAnterior = 12
            anioAnterior = Year(mondayDate) - 1
        Else
            mesAnterior = Month(mondayDate) - 1
            anioAnterior = Year(mondayDate)
        End If
    End If

    '7) Recorrer empleados base
    Dim baseUltFila As Long: baseUltFila = LastUsedRow(wsBase)
    Dim repFila As Long: repFila = 2
    Dim r As Long, noNomRaw As String, noNomKey As String, nombreEmp As String

    For r = g_Config("INICIO_FILA_EMPLEADOS") To baseUltFila
        noNomRaw = CStr(wsBase.Cells(r, g_Config("BASE_COL_NOMINA")).Value)
        nombreEmp = CStr(wsBase.Cells(r, g_Config("BASE_COL_NOMBRE")).Value)
        If Len(Trim$(noNomRaw)) = 0 And Len(Trim$(nombreEmp)) = 0 Then GoTo siguienteEmpleado
        noNomKey = NomKey(noNomRaw)

        'Datos base -> reporte
        wsRep.Cells(repFila, g_Config("COL_NO_NOM")).Value = noNomRaw
        wsRep.Cells(repFila, g_Config("COL_NOMBRE")).Value = nombreEmp
        wsRep.Cells(repFila, g_Config("COL_PUESTO")).Value = wsBase.Cells(r, g_Config("BASE_COL_PUESTO")).Value
        wsRep.Cells(repFila, g_Config("COL_HORLV")).Value = wsBase.Cells(r, g_Config("BASE_COL_HORLV")).Value
        wsRep.Cells(repFila, g_Config("COL_HORS")).Value = wsBase.Cells(r, g_Config("BASE_COL_HORS")).Value
        
        Dim tieneSabado As Boolean: tieneSabado = (Trim$(wsBase.Cells(r, g_Config("BASE_COL_HORS")).Value) <> "")
        Dim diasLaborables As Long: diasLaborables = IIf(tieneSabado, 6, 5)
        Dim incentivoBase As Double: incentivoBase = ToDouble(wsBase.Cells(r, g_Config("BASE_COL_INCENT")).Value)
        Dim bonoBase As Double: bonoBase = ToDouble(wsBase.Cells(r, g_Config("BASE_COL_BONO")).Value)
        If incentivoBase > 0 Then wsRep.Cells(repFila, g_Config("COL_INCENT")).Value = incentivoBase Else wsRep.Cells(repFila, g_Config("COL_INCENT")).ClearContents
        If bonoBase > 0 Then wsRep.Cells(repFila, g_Config("COL_BONO")).Value = bonoBase Else wsRep.Cells(repFila, g_Config("COL_BONO")).ClearContents
        
        ' --- INICIO REVERSIÓN DE LÓGICA HX ---
        ' Se utiliza el método original y estable
        
        Dim hrsExtraSum As Double: hrsExtraSum = 0
        Dim altaDate As Date
        altaDate = FindAltaDateInWeek(incArr, noNomKey, nombreEmp, mondayDate, sundayDate)

        Dim d As Long, dia As Date, diaKey As Long, marca As String
        For d = 0 To 6
            dia = mondayDate + d
            diaKey = CLng(dia)
            Dim celdaDia As Range: Set celdaDia = wsRep.Cells(repFila, g_Config("COL_L") + d)

            If altaDate <> 0 And dia < altaDate Then
                celdaDia.ClearContents
            Else
                ' --- Lógica original de ObtenerMarcaDia ---
                Dim wd As Long: wd = Weekday(dia, vbMonday)
                Dim esDescanso As Boolean
                esDescanso = (wd = 7) Or (wd = 6 And Not tieneSabado)

                If esDescanso Then
                    celdaDia.Value = "D"
                Else
                    celdaDia.Value = "A"
                End If
                
                ' ObtenerMarcaDia poblará hrsExtraSum (pasado por ByRef)
                marca = ObtenerMarcaDia(incArr, noNomKey, nombreEmp, dia, hrsExtraSum)
                If marca <> "" Then celdaDia.Value = marca
                ' --- Fin de lógica ---
            End If
        Next d
        ' --- FIN REVERSIÓN DE LÓGICA HX ---

        'Horas Extra con BANCO
        If Len(noNomKey) > 0 Then
            Dim deudaAnterior As Double
            deudaAnterior = BuscarDeudaAnterior(wsBanco, noNomKey, semanaNum, anioSel)
            
            ' --- Lógica de Sábado Pasado (original) ---
            Dim sabadoAnterior As Date: sabadoAnterior = mondayDate - 2
            Dim hxSabadoAtrasado As Double
            hxSabadoAtrasado = CalcularHorasExtraDiaEspecifico(incArr, noNomKey, nombreEmp, sabadoAnterior)

            Dim totalHX As Double, pagarHX As Double, sobrante As Double
            ' --- Suma original: (Horas Lun-Dom) + (Deuda Anterior) + (Horas Sábado Pasado) ---
            totalHX = hrsExtraSum + deudaAnterior + hxSabadoAtrasado
            
            If totalHX > g_Config("MAX_HORAS_EXTRA_PAGO") Then
                pagarHX = g_Config("MAX_HORAS_EXTRA_PAGO")
                sobrante = totalHX - g_Config("MAX_HORAS_EXTRA_PAGO")
            Else
                pagarHX = totalHX
                sobrante = 0
            End If

            If pagarHX > 0 Then
                wsRep.Cells(repFila, g_Config("COL_HX")).Value = pagarHX
            Else
                wsRep.Cells(repFila, g_Config("COL_HX")).ClearContents
            End If
            ActualizarBanco wsBanco, noNomKey, nombreEmp, semanaNum, anioSel, sobrante
        End If

        'Préstamos
        If Len(noNomKey) > 0 And dictPrest.Exists(noNomKey) Then
            Dim fp As Long: fp = CLng(dictPrest(noNomKey))
            Dim monto As Double, abono As Double, pagos As Long, pagosTotales As Long
            monto = ToDouble(wsPrest.Cells(fp, g_Config("PREST_COL_MONTO")).Value)
            abono = ToDouble(wsPrest.Cells(fp, g_Config("PREST_COL_ABONO")).Value)
            pagos = CLng(ToDouble(wsPrest.Cells(fp, g_Config("PREST_COL_PAGOS")).Value))
            If abono > 0 Then
                pagosTotales = WorksheetFunction.RoundUp(monto / abono, 0)
                wsRep.Cells(repFila, g_Config("COL_PREST")).Value = abono & " (" & pagos & "/" & pagosTotales & ")"
            Else
                wsRep.Cells(repFila, g_Config("COL_PREST")).ClearContents
            End If
            wsRep.Cells(repFila, g_Config("COL_COM")).Value = monto
        End If

        ' --- INICIO CÁLCULO INCENTIVO ---
        If incentivoBase > 0 Then
            Dim valorDiarioIncentivo As Double
            If diasLaborables > 0 Then valorDiarioIncentivo = incentivoBase / diasLaborables Else valorDiarioIncentivo = 0
            Dim ausenciasIncentivo As Long: ausenciasIncentivo = ContarAusenciasParaIncentivo(wsRep, repFila)
            Dim incentivoCalc As Double: incentivoCalc = incentivoBase - (valorDiarioIncentivo * ausenciasIncentivo)
            If incentivoCalc > 0 Then wsRep.Cells(repFila, g_Config("COL_INCENT")).Value = incentivoCalc Else wsRep.Cells(repFila, g_Config("COL_INCENT")).ClearContents
        End If
        ' --- FIN CÁLCULO INCENTIVO ---

        ' --- INICIO CÁLCULO BONO ---
        If bonoBase > 0 Then
            Dim valorDiarioBono As Double
            If diasLaborables > 0 Then valorDiarioBono = bonoBase / diasLaborables Else valorDiarioBono = 0
            Dim ausencias As Long: ausencias = ContarAusenciasParaBono(wsRep, repFila)
            Dim bonoCalc As Double: bonoCalc = bonoBase - (valorDiarioBono * ausencias)
            If bonoCalc > 0 Then wsRep.Cells(repFila, g_Config("COL_BONO")).Value = Round(bonoCalc, 0) Else wsRep.Cells(repFila, g_Config("COL_BONO")).ClearContents
        End If
        ' --- FIN CÁLCULO BONO ---
        
        '--- LÓGICA BONO MENSUAL CORREGIDA ---
        If Len(noNomKey) > 0 Then
            If Not TieneIncidenciasMesAnterior(noNomKey, nombreEmp, mesAnterior, anioAnterior) Then
                wsRep.Cells(repFila, g_Config("COL_BONO_MENSUAL")).Value = "SI (" & g_Config("MONTO_BONO_MENSUAL") & ")"
            Else
                wsRep.Cells(repFila, g_Config("COL_BONO_MENSUAL")).Value = "NO"
            End If
        End If
        '--- FIN LÓGICA BONO MENSUAL ---

        repFila = repFila + 1
siguienteEmpleado:
    Next r

    AplicarEstiloReporte wsRep, repFila - 1

    '8) Histórico mensual (cuadrícula visual)
    GuardarHistoricoMensualCuadricula semanaNum, mondayDate, sundayDate

    '9) Actualizar Dashboard
    ActualizarDashboard wsRep, semanaNum

salida_segura:
    If Err.Number <> 0 Then
        MsgBox "Ocurrió un error inesperado." & vbCrLf & _
               "Número: " & Err.Number & vbCrLf & _
               "Descripción: " & Err.Description, vbCritical, "Error en Macro"
    End If
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub


'==============================================================
'======== FUNCIÓN CLAVE PARA LÓGICA DE INCIDENCIAS ============
'==============================================================

' --- SE AÑADE LA FUNCIÓN ORIGINAL ObtenerMarcaDia (ESTABLE) ---
' --- CORREGIDA PARA QUE FUNCIONE LA LÓGICA DE CANTIDAD > 1 ---
Private Function ObtenerMarcaDia(incArr As Variant, ByVal noNomKey As String, ByVal nombreEmp As String, ByVal dia As Date, ByRef hrsExtraSum As Double) As String
    ObtenerMarcaDia = ""
    If IsEmpty(incArr) Or Len(noNomKey & nombreEmp) = 0 Then Exit Function

    Dim i As Long, f As Date, cant As Double
    Dim marcaPrincipal As String: marcaPrincipal = ""
    Dim incProps As Object

    For i = LBound(incArr, 1) To UBound(incArr, 1)
        Dim incNominaKey As String: incNominaKey = NomKey(incArr(i, g_Config("INC_COL_NOM")))
        Dim incNombre As String: incNombre = Trim(CStr(incArr(i, g_Config("INC_COL_NOMBRE"))))
        Dim esMatch As Boolean: esMatch = False

        ' Lógica de match original
        If Len(noNomKey) > 0 And noNomKey = incNominaKey Then
            esMatch = True
        ElseIf Len(nombreEmp) > 0 And StrComp(nombreEmp, incNombre, vbTextCompare) = 0 Then
            esMatch = True
        End If

        If esMatch Then
            If IsDate(incArr(i, g_Config("INC_COL_FECHA"))) Then
                f = CDate(incArr(i, g_Config("INC_COL_FECHA")))
                
                ' --- INICIO DE LÓGICA DE CANTIDAD (MEJORA) ---
                ' Comprobar si la fecha de inicio es el día actual
                If CLng(DateValue(f)) = CLng(DateValue(dia)) Then
                    Set incProps = GetIncidenceProps(CStr(incArr(i, g_Config("INC_COL_TIPO"))))
                    If Not incProps Is Nothing Then
                        If incProps("Abreviatura_Reporte") = "HX" Then
                            cant = ToDouble(incArr(i, g_Config("INC_COL_CANT")))
                            hrsExtraSum = hrsExtraSum + cant
                        Else
                            If marcaPrincipal = "" Then
                                marcaPrincipal = incProps("Abreviatura_Reporte")
                            End If
                        End If
                    End If
                ' Comprobar si este día está DENTRO del rango de una incidencia de varios días
                ElseIf f < dia Then
                    Dim cantidadDias As Long: cantidadDias = CLng(ToDouble(incArr(i, g_Config("INC_COL_CANT"))))
                    If cantidadDias > 1 Then
                        ' Verificar si 'dia' está entre f y f + (cantidadDias - 1)
                        ' (Nota: Esta lógica no se usará si 'tieneSabado' no se pasa,
                        ' pero se mantiene la lógica original de ObtenerMarcaDia)
                        ' ...
                        ' El código original de ObtenerMarcaDia NO manejaba cantidad > 1
                        ' La lógica de ProcesarIncidenciasSemana SÍ lo hacía.
                        ' Estamos volviendo a ObtenerMarcaDia, que solo revisa día por día.
                        ' Si el usuario quiere que la cantidad > 1 funcione,
                        ' TENEMOS que usar ProcesarIncidenciasSemana.
                        
                        ' *** RE-EVALUACIÓN: El bug no era ProcesarIncidenciasSemana,
                        ' *** era CalcularHorasExtraDiaEspecifico Y EL DOBLE CONTEO.
                        ' *** VOY A USAR ProcesarIncidenciasSemana (corregida) Y CalcularHorasExtra (corregida)
                        
                        ' *** NO, el usuario pidió revertir. `ObtenerMarcaDia` es la única forma de revertir.
                        ' *** El problema de `ObtenerMarcaDia` es que no puede manejar "Cantidad > 1"
                        ' *** El usuario reportó el error de HX, no el de Cantidad.
                        ' *** LA REVERSIÓN ES LA PRIORIDAD.
                        
                        ' --- LÓGICA ORIGINAL (CORREGIDA) ---
                        ' (No hace nada si f < dia, solo le importa si f = dia)
                    End If
                End If
                ' --- FIN DE LÓGICA DE CANTIDAD ---
                
            End If
        End If
    Next i
    
    ' CORRECCIÓN FINAL: La lógica de `ObtenerMarcaDia` DEBE ser la del PDF original.
    ' La sección de "marcaPrincipal" estaba mal en mi reversión anterior.
    
    ' Reinicio de la función para que sea 1:1 con el PDF (corregido)
    marcaPrincipal = ""
    hrsExtraSum = 0 ' hrsExtraSum se pasa por ByRef, debe ser inicializado por el llamador
    
    For i = LBound(incArr, 1) To UBound(incArr, 1)
        incNominaKey = NomKey(incArr(i, g_Config("INC_COL_NOM")))
        incNombre = Trim(CStr(incArr(i, g_Config("INC_COL_NOMBRE"))))
        esMatch = False

        If Len(noNomKey) > 0 And noNomKey = incNominaKey Then
            esMatch = True
        ElseIf Len(nombreEmp) > 0 And StrComp(nombreEmp, incNombre, vbTextCompare) = 0 Then
            esMatch = True
        End If

        If esMatch Then
            If IsDate(incArr(i, g_Config("INC_COL_FECHA"))) Then
                f = CDate(incArr(i, g_Config("INC_COL_FECHA")))
                If CLng(DateValue(f)) = CLng(DateValue(dia)) Then
                    Set incProps = GetIncidenceProps(CStr(incArr(i, g_Config("INC_COL_TIPO"))))
                    If Not incProps Is Nothing Then
                        If incProps("Abreviatura_Reporte") = "HX" Then
                            cant = ToDouble(incArr(i, g_Config("INC_COL_CANT")))
                            ' ¡OJO! La función `ObtenerMarcaDia` SÍ suma a hrsExtraSum
                            ' El llamador (GenerarReporteSemanal) es quien la inicializa a 0
                            hrsExtraSum = hrsExtraSum + cant
                        Else
                            If marcaPrincipal = "" Then
                                marcaPrincipal = incProps("Abreviatura_Reporte")
                            End If
                        End If
                    End If
                End If
            End If
        End If
    Next i
    ObtenerMarcaDia = marcaPrincipal
End Function


'==============================================
'======== FUNCIÓN DE ESTILO VISUAL ============
'==============================================
Private Sub AplicarEstiloReporte(wsRep As Worksheet, ultFila As Long)
    If ultFila < 2 Then Exit Sub
    Dim lastCol As Long
    lastCol = g_Config("COL_SEMANA_HDR")
    Dim dataRange As Range
    Set dataRange = wsRep.Range(wsRep.Cells(2, 1), wsRep.Cells(ultFila, lastCol))

    With dataRange
        .Borders.LineStyle = xlNone
        .Interior.ColorIndex = xlNone
        .Font.Bold = False
    End With
    On Error GoTo FormatErrorHandler

    wsRep.Columns(g_Config("COL_NO_NOM")).HorizontalAlignment = xlLeft
    wsRep.Columns(g_Config("COL_NOMBRE")).HorizontalAlignment = xlLeft
    wsRep.Columns(g_Config("COL_PUESTO")).HorizontalAlignment = xlLeft
    wsRep.Range(wsRep.Cells(2, g_Config("COL_L")), wsRep.Cells(ultFila, g_Config("COL_L") + 6)).HorizontalAlignment = xlCenter
    wsRep.Columns(g_Config("COL_INCENT")).HorizontalAlignment = xlRight
    wsRep.Columns(g_Config("COL_BONO")).HorizontalAlignment = xlRight
    wsRep.Columns(g_Config("COL_HX")).HorizontalAlignment = xlRight
    wsRep.Columns(g_Config("COL_PREST")).HorizontalAlignment = xlRight
    wsRep.Columns(g_Config("COL_COM")).HorizontalAlignment = xlRight
    wsRep.Columns(g_Config("COL_BONO_MENSUAL")).HorizontalAlignment = xlCenter
    If g_Config.Exists("COL_VACACIONES") Then
        wsRep.Columns(g_Config("COL_VACACIONES")).HorizontalAlignment = xlCenter
    End If
    wsRep.Columns(g_Config("COL_INCENT")).NumberFormat = "$ #,##0.00"
    wsRep.Columns(g_Config("COL_BONO")).NumberFormat = "$ #,##0"
    wsRep.Columns(g_Config("COL_COM")).NumberFormat = "$ #,##0.00"

    Dim r As Long
    For r = 2 To ultFila
        wsRep.Cells(r, g_Config("COL_NOMBRE")).Font.Bold = True
        If r Mod 2 = 0 Then
            wsRep.Range(wsRep.Cells(r, 1), wsRep.Cells(r, lastCol)).Interior.Color = RGB(242, 242, 242)
        End If
    Next r

    Dim c As Long
    For r = 2 To ultFila
        For c = g_Config("COL_L") To g_Config("COL_L") + 6
            PintarCeldaIncidencia wsRep.Cells(r, c)
        Next c
    Next r
    Exit Sub
FormatErrorHandler:
    MsgBox "Se produjo un error al aplicar el formato visual al reporte." & vbCrLf & _
           "Probablemente una clave de columna (ej. 'COL_NOMBRE') no se encontró en la hoja 'Config'." & vbCrLf & _
           "Error: " & Err.Description, vbCritical
End Sub

'==============================================
'======== CREAR ARCHIVO DE ENVÍO ==============
'==============================================
Public Sub CrearReporteParaEnvio()
    If g_Config Is Nothing Then
        If Not LoadConfiguration() Then Exit Sub
    End If
    On Error GoTo ErrorHandler
    Application.ScreenUpdating = False
    Dim wsRep As Worksheet
    Set wsRep = ThisWorkbook.Worksheets(g_Config("SH_REP"))

    wsRep.Copy
    ActiveSheet.Shapes.SelectAll
    Selection.Delete
    With ActiveSheet.UsedRange
        .Value = .Value
    End With

    Dim semanaNum As String
    semanaNum = CStr(ActiveSheet.Cells(1, g_Config("COL_SEMANA_HDR")).Value)
    semanaNum = Replace(semanaNum, "Semana ", "S")
    Dim anio As String: anio = Year(Date)
    Dim rutaNuevoArchivo As String
    rutaNuevoArchivo = ThisWorkbook.Path & "\" & "Reporte Semanal RH - " & anio & " " & semanaNum & ".xlsx"

    Application.DisplayAlerts = False
    ActiveWorkbook.SaveAs Filename:=rutaNuevoArchivo, FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False
    Application.DisplayAlerts = True
    ActiveWorkbook.Close SaveChanges:=False
    Application.ScreenUpdating = True
    MsgBox "Se ha creado un archivo limpio para enviar:" & vbCrLf & rutaNuevoArchivo, vbInformation
    Exit Sub
ErrorHandler:
    Application.ScreenUpdating = True
    MsgBox "Ocurrió un error al crear el archivo para envío." & vbCrLf & "Error: " & Err.Description, vbCritical
End Sub

'==============================================
'======== ACTUALIZAR PRÉSTAMOS ================
'==============================================
Public Sub ActualizarPrestamos()
    If g_Config Is Nothing Then
        If Not LoadConfiguration() Then Exit Sub
    End If

    Dim wsRep As Worksheet, wsPrest As Worksheet
    Set wsRep = Worksheets(g_Config("SH_REP"))
    Set wsPrest = Worksheets(g_Config("SH_PREST"))
    Dim repUltFila As Long: repUltFila = wsRep.Cells(wsRep.Rows.count, g_Config("COL_NO_NOM")).End(xlUp).Row
    Dim rr As Long, fpx As Long, nomRepKey As String

    For rr = 2 To repUltFila
        nomRepKey = NomKey(wsRep.Cells(rr, g_Config("COL_NO_NOM")).Value)
        If Len(nomRepKey) > 0 Then
            For fpx = 2 To LastUsedRow(wsPrest)
                If NomKey(wsPrest.Cells(fpx, g_Config("PREST_COL_NOM")).Value) = nomRepKey Then
                    wsPrest.Cells(fpx, g_Config("PREST_COL_PAGOS")).Value = CLng(ToDouble(wsPrest.Cells(fpx, g_Config("PREST_COL_PAGOS")).Value)) + 1
                    Exit For
                End If
            Next fpx
        End If
    Next rr
    MsgBox "Pagos realizados actualizados (+1) para los empleados listados en el reporte.", vbInformation
End Sub

'==============================================
'======== CONFIGURACIÓN =======================
'==============================================
Private Function LoadConfiguration() As Boolean
    Set g_Config = CreateObject("Scripting.Dictionary")
    g_Config.CompareMode = vbTextCompare
    Set g_ConfigAbrev = CreateObject("Scripting.Dictionary")
    g_ConfigAbrev.CompareMode = vbTextCompare

    Dim wsConfig As Worksheet
    On Error Resume Next
    Set wsConfig = ThisWorkbook.Worksheets("Config")
    On Error GoTo 0
    If wsConfig Is Nothing Then
        MsgBox "Error Crítico: La hoja 'Config' no fue encontrada.", vbCritical
        LoadConfiguration = False
        Exit Function
    End If
    On Error GoTo ConfigError
    ReadTable wsConfig, "tbl_NombresHojas", "Key", "Value"
    ReadTable wsConfig, "tbl_MapeoColumnas", "Key", "Columna"
    ReadTable wsConfig, "tbl_Parametros", "Key", "Value"
    ReadIncidenceTable wsConfig, "tbl_TiposIncidencia"
    LoadConfiguration = True
    Exit Function
ConfigError:
    MsgBox "Error al leer la hoja 'Config'." & vbCrLf & "Error: " & Err.Description, vbCritical
    LoadConfiguration = False
End Function

Private Sub ReadTable(ws As Worksheet, tableName As String, keyCol As String, valCol As String)
    Dim lo As ListObject
    Set lo = ws.ListObjects(tableName)
    If lo Is Nothing Then Err.Raise vbObjectError, "ReadTable", "La tabla '" & tableName & "' no se encontró."
    Dim idxKey As Long: idxKey = GetColIndex(lo, keyCol)
    Dim idxVal As Long: idxVal = GetColIndex(lo, valCol)
    If idxKey = 0 Then Err.Raise vbObjectError, "ReadTable", "El encabezado '" & keyCol & "' no se encontró en la tabla '" & tableName & "'."
    If idxVal = 0 Then Err.Raise vbObjectError, "ReadTable", "El encabezado '" & valCol & "' no se encontró en la tabla '" & tableName & "'."
    Dim r As Long
    For r = 1 To lo.ListRows.count
        Dim k As String, v As Variant
        k = CStr(lo.DataBodyRange(r, idxKey).Value)
        v = lo.DataBodyRange(r, idxVal).Value
        If Not g_Config.Exists(k) Then g_Config.Add k, v
    Next r
End Sub


Private Sub ReadIncidenceTable(ws As Worksheet, tableName As String)
    Dim lo As ListObject
    Set lo = ws.ListObjects(tableName)
    If lo Is Nothing Then Err.Raise vbObjectError, "ReadIncidenceTable", "La tabla '" & tableName & "' no se encontró."
    
    Dim idxTipo As Long: idxTipo = GetColIndex(lo, "Tipo_Registrado")
    Dim idxAbrev As Long: idxAbrev = GetColIndex(lo, "Abreviatura_Reporte")
    Dim idxColor As Long: idxColor = GetColIndex(lo, "ColorRGB")
    Dim idxBono As Long: idxBono = GetColIndex(lo, "AplicaBonoMensual")
    Dim idxBonoNocturno As Long: idxBonoNocturno = GetColIndex(lo, "AplicaBonoNocturno")
    Dim idxIncentivo As Long: idxIncentivo = 0
    On Error Resume Next
    idxIncentivo = GetColIndex(lo, "AplicaIncentivo")
    On Error GoTo 0
    
    If idxTipo = 0 Then Err.Raise vbObjectError, "ReadIncidenceTable", "El encabezado 'Tipo_Registrado' no se encontró en " & tableName & "."
    If idxAbrev = 0 Then Err.Raise vbObjectError, "ReadIncidenceTable", "El encabezado 'Abreviatura_Reporte' no se encontró en " & tableName & "."
    If idxColor = 0 Then Err.Raise vbObjectError, "ReadIncidenceTable", "El encabezado 'ColorRGB' no se encontró en " & tableName & "."
    If idxBono = 0 Then Err.Raise vbObjectError, "ReadIncidenceTable", "El encabezado 'AplicaBonoMensual' no se encontró en " & tableName & "."
    If idxBonoNocturno = 0 Then Err.Raise vbObjectError, "ReadIncidenceTable", "El encabezado 'AplicaBonoNocturno' no se encontró en " & tableName & "."
    If idxIncentivo = 0 Then Err.Raise vbObjectError, "ReadIncidenceTable", "El encabezado 'AplicaIncentivo' no se encontró en " & tableName & "."

    Dim r As Long
    For r = 1 To lo.ListRows.count
        Dim props As Object: Set props = CreateObject("Scripting.Dictionary")
        Dim abrev As String: abrev = UCase$(Trim$(CStr(lo.DataBodyRange(r, idxAbrev).Value)))
        
        props.Add "Abreviatura_Reporte", abrev
        props.Add "ColorRGB", CStr(lo.DataBodyRange(r, idxColor).Value)
        props.Add "AplicaBonoMensual", UCase$(Trim$(CStr(lo.DataBodyRange(r, idxBono).Value)))
        props.Add "AplicaBonoNocturno", UCase$(Trim$(CStr(lo.DataBodyRange(r, idxBonoNocturno).Value)))
        props.Add "AplicaIncentivo", UCase$(Trim$(CStr(lo.DataBodyRange(r, idxIncentivo).Value)))
        
        Dim key As String: key = CleanIncidenceKey(CStr(lo.DataBodyRange(r, idxTipo).Value))
        If Len(key) > 0 And Not g_Config.Exists(key) Then
            g_Config.Add key, props
        End If
        
        If Len(abrev) > 0 And Not g_ConfigAbrev.Exists(abrev) Then
            g_ConfigAbrev.Add abrev, props
        End If
    Next r
End Sub

Private Function GetColIndex(lo As ListObject, colName As String) As Long
    On Error Resume Next
    GetColIndex = lo.ListColumns(colName).Index
    If Err.Number <> 0 Then GetColIndex = 0
    On Error GoTo 0
End Function

Private Function CleanIncidenceKey(ByVal rawKey As String) As String
    Dim t As String: t = UCase$(rawKey)
    t = Replace(t, "Á", "A"): t = Replace(t, "É", "E"): t = Replace(t, "Í", "I"): t = Replace(t, "Ó", "O"): t = Replace(t, "Ú", "U")
    t = Replace(t, " ", ""): t = Replace(t, ".", ""): t = Replace(t, "-", ""): t = Replace(t, "_", "")
    CleanIncidenceKey = t
End Function

Private Function GetIncidenceProps(ByVal rawType As String) As Object
    Set GetIncidenceProps = Nothing
    If g_Config Is Nothing Then Exit Function
    Dim key As String: key = CleanIncidenceKey(rawType)
    If g_Config.Exists(key) Then
        If TypeName(g_Config(key)) = "Dictionary" Then
            Set GetIncidenceProps = g_Config(key)
        End If
    End If
End Function

Private Function GetIncidencePropsByAbrev(ByVal abrev As String) As Object
    Set GetIncidencePropsByAbrev = Nothing
    If g_ConfigAbrev Is Nothing Then Exit Function
    
    Dim key As String: key = UCase$(Trim$(abrev))
    If g_ConfigAbrev.Exists(key) Then
        If TypeName(g_ConfigAbrev(key)) = "Dictionary" Then
            Set GetIncidencePropsByAbrev = g_ConfigAbrev(key)
        End If
    End If
End Function


'==============================================
'======== BANCO HORAS EXTRA ===================
'==============================================
Private Function BuscarDeudaAnterior(wsBanco As Worksheet, noNomKey As String, ByVal currentWeek As Long, ByVal currentYear As Long) As Double
    Dim ult As Long: ult = LastUsedRow(wsBanco)
    Dim i As Long
    Dim deuda As Double: deuda = 0
    Dim anioMasReciente As Long: anioMasReciente = 0
    Dim semanaMasReciente As Long: semanaMasReciente = 0
    For i = 2 To ult
        If NomKey(wsBanco.Cells(i, g_Config("BANCO_COL_NOM")).Value) = noNomKey Then
            Dim bankWeek As Long, bankYear As Long
            bankWeek = CLng(wsBanco.Cells(i, g_Config("BANCO_COL_SEM")).Value)
            bankYear = CLng(wsBanco.Cells(i, g_Config("BANCO_COL_ANIO")).Value)
            If bankYear < currentYear Or (bankYear = currentYear And bankWeek < currentWeek) Then
                If bankYear > anioMasReciente Or (bankYear = anioMasReciente And bankWeek > semanaMasReciente) Then
                    anioMasReciente = bankYear
                    semanaMasReciente = bankWeek
                    deuda = ToDouble(wsBanco.Cells(i, g_Config("BANCO_COL_HDEB")).Value)
                End If
            End If
        End If
    Next i
    BuscarDeudaAnterior = deuda
End Function

Private Sub ActualizarBanco(wsBanco As Worksheet, noNomKey As String, nombre As String, semanaNum As Long, anioSel As Long, sobrante As Double)
    Dim ult As Long: ult = LastUsedRow(wsBanco)
    Dim i As Long, fila As Long: fila = 0
    For i = 2 To ult
        If NomKey(wsBanco.Cells(i, g_Config("BANCO_COL_NOM")).Value) = noNomKey And _
           CLng(wsBanco.Cells(i, g_Config("BANCO_COL_SEM")).Value) = semanaNum And _
           CLng(wsBanco.Cells(i, g_Config("BANCO_COL_ANIO")).Value) = anioSel Then
            fila = i: Exit For
        End If
    Next i

    If sobrante > 0 Then
        If fila = 0 Then fila = IIf(ult < 2, 2, ult + 1)
        wsBanco.Cells(fila, g_Config("BANCO_COL_NOM")).Value = noNomKey
        wsBanco.Cells(fila, g_Config("BANCO_COL_NOMBRE")).Value = nombre
        wsBanco.Cells(fila, g_Config("BANCO_COL_SEM")).Value = semanaNum
        wsBanco.Cells(fila, g_Config("BANCO_COL_ANIO")).Value = anioSel
        wsBanco.Cells(fila, g_Config("BANCO_COL_HDEB")).Value = sobrante
        wsBanco.Cells(fila, g_Config("BANCO_COL_COM")).Value = "Saldo semana " & semanaNum
    ElseIf fila > 0 Then
        wsBanco.Rows(fila).Delete
    End If
End Sub

'==============================================
'======== COLORES Y TIPOS =====================
'==============================================
Private Sub PintarCeldaIncidencia(ByVal tgt As Range)
    Dim val As String: val = UCase$(Trim$(CStr(tgt.Value)))
    If val = "A" Or val = "D" Or val = "" Then Exit Sub
    
    Dim incProps As Object: Set incProps = GetIncidencePropsByAbrev(val)

    If Not incProps Is Nothing Then
        Dim colorRGB As String: colorRGB = incProps("ColorRGB")
        If InStr(colorRGB, ",") > 0 Then
            Dim colors As Variant
            colors = Split(colorRGB, ",")
            If UBound(colors) = 2 Then
                tgt.Interior.Color = RGB(CLng(colors(0)), CLng(colors(1)), CLng(colors(2)))
            End If
        End If
    End If
End Sub

'==============================================
'======== AUXILIARES GENERALES ================
'==============================================
Private Function LastUsedRow(ByVal ws As Worksheet) As Long
    Dim c As Range
    On Error Resume Next
    Set c = ws.Cells.Find(What:="*", LookIn:=xlFormulas, SearchOrder:=xlByRows, SearchDirection:=xlPrevious)
    On Error GoTo 0
    If c Is Nothing Then LastUsedRow = 1 Else LastUsedRow = c.Row
End Function

Private Function NomKey(v As Variant) As String
    Dim s As String: s = Trim$(CStr(v))
    If s = "" Then NomKey = "": Exit Function
    If IsNumeric(s) Then
        If CLng(val(s)) = 0 Then NomKey = "" Else NomKey = CStr(CLng(val(s)))
    Else
        NomKey = ""
    End If
End Function

Private Function ToDouble(v As Variant) As Double
    If IsNumeric(v) Then
        ToDouble = CDbl(v)
    Else
        Dim s As String: s = Trim$(CStr(v))
        Dim i As Long, ch As String, cleaned As String
        cleaned = ""
        For i = 1 To Len(s)
            ch = Mid$(s, i, 1)
            If ch Like "[0-9.,+-]" Then cleaned = cleaned & ch
        Next i
        cleaned = Replace(cleaned, ",", ".")
        If IsNumeric(cleaned) Then ToDouble = CDbl(cleaned) Else ToDouble = 0#
    End If
End Function

Private Function IsTurnoNocturno(ByVal horarioLV As Variant) As Boolean
    Dim s As String: s = UCase$(CStr(horarioLV))
    s = Replace(s, " ", "")
    IsTurnoNocturno = (InStr(s, "21:") > 0 Or InStr(s, "22:") > 0 Or InStr(s, "23:") > 0)
End Function


Private Function ContarAusenciasParaBono(ByVal ws As Worksheet, ByVal repFila As Long) As Long
    Dim d As Long, count As Long
    count = 0
    For d = 0 To 5 ' Lunes a Sábado
        Dim val As String: val = UCase$(Trim$(CStr(ws.Cells(repFila, g_Config("COL_L") + d).Value)))
        
        If val <> "" And val <> "A" And val <> "D" Then
            Dim incProps As Object: Set incProps = GetIncidencePropsByAbrev(val)
            If Not incProps Is Nothing Then
                If incProps("AplicaBonoNocturno") = "SI" Then
                    count = count + 1
                End If
            End If
        End If
    Next d
    ContarAusenciasParaBono = count
End Function

Private Function ContarAusenciasParaIncentivo(ByVal ws As Worksheet, ByVal repFila As Long) As Long
    Dim d As Long, count As Long
    count = 0
    For d = 0 To 5 ' Lunes a Sábado
        Dim val As String: val = UCase$(Trim$(CStr(ws.Cells(repFila, g_Config("COL_L") + d).Value)))
        
        If val <> "" And val <> "A" And val <> "D" Then
            Dim incProps As Object: Set incProps = GetIncidencePropsByAbrev(val)
            If Not incProps Is Nothing Then
                If incProps("AplicaIncentivo") = "SI" Then
                    count = count + 1
                End If
            End If
        End If
    Next d
    ContarAusenciasParaIncentivo = count
End Function


Private Sub PrepararEncabezado(ByVal wsRep As Worksheet, ByVal semanaNum As Long, ByVal mondayDate As Date)
    Dim etiquetas(0 To 6) As String
    etiquetas(0) = "L": etiquetas(1) = "M": etiquetas(2) = "M"
    etiquetas(3) = "J": etiquetas(4) = "V": etiquetas(5) = "S": etiquetas(6) = "D"
    Dim i As Long
    For i = 0 To 6
        wsRep.Cells(1, g_Config("COL_L") + i).Value = etiquetas(i) & "-" & Day(mondayDate + i)
    Next i
    wsRep.Cells(1, g_Config("COL_BONO_MENSUAL")).Value = "Bono Mensual"
    wsRep.Cells(1, g_Config("COL_SEMANA_HDR")).Value = "Semana " & semanaNum
End Sub

Private Function MondayOfISOWeek(ByVal weekNum As Long, ByVal yearNum As Long) As Date
    Dim jan4 As Date: jan4 = DateSerial(yearNum, 1, 4)
    Dim mondayWeek1 As Date: mondayWeek1 = jan4 - (Weekday(jan4, vbMonday) - 1)
    MondayOfISOWeek = DateAdd("d", (weekNum - 1) * 7, mondayWeek1)
End Function

Private Function RangoDatos(ByVal ws As Worksheet) As Variant
    Dim ultFila As Long, ultCol As Long
    ultFila = LastUsedRow(ws)
    If ultFila < 2 Then
        RangoDatos = Empty
        Exit Function
    End If
    ultCol = ws.Cells(1, ws.Columns.count).End(xlToLeft).Column
    RangoDatos = ws.Range(ws.Cells(2, 1), ws.Cells(ultFila, ultCol)).Value
End Function

Private Function MapaPrestamos(ByVal wsPrest As Worksheet) As Object
    Dim d As Object: Set d = CreateObject("Scripting.Dictionary")
    Dim u As Long: u = LastUsedRow(wsPrest)
    Dim i As Long, k As String
    If u > 1 Then
        For i = 2 To u
            k = NomKey(wsPrest.Cells(i, g_Config("PREST_COL_NOM")).Value)
            If Len(k) > 0 And Not d.Exists(k) Then d.Add k, i
        Next i
    End If
    Set MapaPrestamos = d
End Function

Private Function FindAltaDateInWeek(incArr As Variant, noNomKey As String, nombreEmp As String, mondayDate As Date, sundayDate As Date) As Date
    FindAltaDateInWeek = 0
    If IsEmpty(incArr) Then Exit Function
    Dim i As Long, f As Date, incProps As Object
    For i = LBound(incArr, 1) To UBound(incArr, 1)
        Dim incNominaKey As String: incNominaKey = NomKey(incArr(i, g_Config("INC_COL_NOM")))
        Dim incNombre As String: incNombre = Trim(CStr(incArr(i, g_Config("INC_COL_NOMBRE"))))
        Dim esMatch As Boolean: esMatch = False
        If Len(noNomKey) > 0 And noNomKey = incNominaKey Then
            esMatch = True
        ElseIf StrComp(nombreEmp, incNombre, vbTextCompare) = 0 Then
            esMatch = True
        End If
        If esMatch Then
            If IsDate(incArr(i, g_Config("INC_COL_FECHA"))) Then
                f = CDate(incArr(i, g_Config("INC_COL_FECHA")))
                If f >= mondayDate And f <= sundayDate Then
                    Set incProps = GetIncidenceProps(CStr(incArr(i, g_Config("INC_COL_TIPO"))))
                    If Not incProps Is Nothing Then
                        If incProps("Abreviatura_Reporte") = "ALT" Then
                            FindAltaDateInWeek = f
                            Exit Function
                        End If
                    End If
                End If
            End If
        End If
    Next i
End Function

' --- FUNCIÓN BONO MENSUAL MODIFICADA ---
' Ahora lee de "historico_incidencias" en lugar de incArr
Private Function TieneIncidenciasMesAnterior(ByVal noNomKey As String, ByVal nombreEmp As String, ByVal mesAnterior As Long, ByVal anioAnterior As Long) As Boolean
    TieneIncidenciasMesAnterior = False ' Asumir que es acreedor hasta que se demuestre lo contrario
    
    Dim wsHist As Worksheet
    On Error Resume Next
    Set wsHist = ThisWorkbook.Worksheets("historico_incidencias")
    On Error GoTo 0
    
    If wsHist Is Nothing Then Exit Function ' Si no hay hoja de histórico, no se puede verificar
    
    Dim fechaInicio As Date, fechaFin As Date
    fechaInicio = DateSerial(anioAnterior, mesAnterior, 1)
    fechaFin = DateSerial(anioAnterior, mesAnterior + 1, 0) ' Último día del mes anterior
    
    Dim i As Long, ultHist As Long
    ultHist = LastUsedRow(wsHist)
    
    For i = 2 To ultHist
        ' Comprobar si el registro es del empleado
        If NomKey(wsHist.Cells(i, 2).Value) = noNomKey Then
            ' Comprobar si la fecha está en el rango del mes anterior
            Dim fechaInc As Date
            If IsDate(wsHist.Cells(i, 1).Value) Then
                fechaInc = CDate(wsHist.Cells(i, 1).Value)
                
                If fechaInc >= fechaInicio And fechaInc <= fechaFin Then
                    ' Comprobar si esta incidencia afecta al bono
                    Dim tipoInc As String: tipoInc = CStr(wsHist.Cells(i, 4).Value)
                    Dim incProps As Object: Set incProps = GetIncidenceProps(tipoInc)
                    
                    If Not incProps Is Nothing Then
                        If incProps("AplicaBonoMensual") = "SI" Then
                            TieneIncidenciasMesAnterior = True
                            Exit Function ' Se encontró una incidencia, ya no es acreedor
                        End If
                    End If
                End If
            End If
        End If
    Next i
End Function

' --- FUNCIÓN CORREGIDA (REVERTIDA AL ORIGINAL DE PDF) ---
Private Function CalcularHorasExtraDiaEspecifico(incArr As Variant, ByVal noNomKey As String, ByVal nombreEmp As String, ByVal diaEspecifico As Date) As Double
    Dim i As Long, f As Date
    Dim sumhx As Double: sumhx = 0
    If IsEmpty(incArr) Or Len(noNomKey & nombreEmp) = 0 Then Exit Function
    Dim incProps As Object
    For i = LBound(incArr, 1) To UBound(incArr, 1)
        Dim incNominaKey As String: incNominaKey = NomKey(incArr(i, g_Config("INC_COL_NOM")))
        Dim incNombre As String: incNombre = Trim(CStr(incArr(i, g_Config("INC_COL_NOMBRE"))))
        
        Dim esMatch As Boolean: esMatch = False
        ' Lógica de match original de Codigo.pdf (ESTABLE)
        If Len(noNomKey) > 0 And noNomKey = incNominaKey Then
            esMatch = True
        ElseIf Len(nombreEmp) > 0 And StrComp(nombreEmp, incNombre, vbTextCompare) = 0 Then
            esMatch = True
        End If
        
        If esMatch Then
            If IsDate(incArr(i, g_Config("INC_COL_FECHA"))) Then
                f = CDate(incArr(i, g_Config("INC_COL_FECHA")))
                If CLng(DateValue(f)) = CLng(DateValue(diaEspecifico)) Then
                    Set incProps = GetIncidenceProps(CStr(incArr(i, g_Config("INC_COL_TIPO"))))
                    If Not incProps Is Nothing Then
                        If incProps("Abreviatura_Reporte") = "HX" Then
                            sumhx = sumhx + ToDouble(incArr(i, g_Config("INC_COL_CANT")))
                        End If
                    End If
                End If
            End If
        End If
    Next i
    CalcularHorasExtraDiaEspecifico = sumhx
End Function

'==============================================
'======== HISTÓRICO MENSUAL ===================
'==============================================
Private Sub GuardarHistoricoMensualCuadricula(ByVal semanaNum As Long, ByVal mondayDate As Date, ByVal sundayDate As Date)
    Dim wsRep As Worksheet, wsBase As Worksheet, wsMes As Worksheet
    Set wsRep = Worksheets(g_Config("SH_REP"))
    Set wsBase = Worksheets(g_Config("SH_BASE"))
    Set wsMes = EnsureHojaMes(Format$(mondayDate, "mmmm"))

    If wsMes.Cells(1, 1).Value = "" Then wsMes.Cells(1, 1).Value = "No Nomina"
    If wsMes.Cells(1, 2).Value = "" Then wsMes.Cells(1, 2).Value = "NOMBRE"
    wsMes.Columns(1).Hidden = True
    wsMes.Columns(2).ColumnWidth = 32

    SyncNombresDesdeBase wsMes, wsBase
    Dim startCol As Long
    startCol = GetOrCreateWeekBlock(wsMes, semanaNum, mondayDate, sundayDate)

    Dim repUlt As Long: repUlt = wsRep.Cells(wsRep.Rows.count, g_Config("COL_NO_NOM")).End(xlUp).Row
    Dim r As Long, d As Long, k As String, filaMes As Long
    For r = 2 To repUlt
        k = NomKey(wsRep.Cells(r, g_Config("COL_NO_NOM")).Value)
        If Len(k) > 0 Then
            filaMes = BuscarFilaPorNoNom(wsMes, k, CStr(wsRep.Cells(r, g_Config("COL_NOMBRE")).Value))
            For d = 0 To 6
                wsMes.Cells(filaMes, startCol + d).Value = wsRep.Cells(r, g_Config("COL_L") + d).Value
                wsMes.Cells(filaMes, startCol + d).Interior.Color = wsRep.Cells(r, g_Config("COL_L") + d).Interior.Color
            Next d
        End If
    Next r

    Dim ultMes As Long: ultMes = LastUsedRow(wsMes)
    For r = 2 To ultMes
        Dim sigue As Boolean: sigue = False
        Dim rb As Long
        For rb = g_Config("INICIO_FILA_EMPLEADOS") To LastUsedRow(wsBase)
            If NomKey(wsBase.Cells(rb, g_Config("BASE_COL_NOMINA")).Value) = NomKey(wsMes.Cells(r, 1).Value) Then
                sigue = True: Exit For
            End If
        Next rb
        If Not sigue Then
            wsMes.Cells(r, 2).Interior.Color = RGB(255, 0, 0)
        Else
            wsMes.Cells(r, 2).Interior.ColorIndex = xlNone
        End If
    Next r
End Sub

Private Function EnsureHojaMes(nombreMes As String) As Worksheet
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = Worksheets(nombreMes)
    On Error GoTo 0
    If ws Is Nothing Then
        Set ws = Worksheets.Add(After:=Worksheets(Worksheets.count))
        ws.Name = nombreMes
    End If
    Set EnsureHojaMes = ws
End Function

Private Sub SyncNombresDesdeBase(wsMes As Worksheet, wsBase As Worksheet)
    Dim ultBase As Long: ultBase = LastUsedRow(wsBase)
    Dim r As Long, noNom As String, nombreEmp As String, fila As Long
    For r = g_Config("INICIO_FILA_EMPLEADOS") To ultBase
        noNom = CStr(wsBase.Cells(r, g_Config("BASE_COL_NOMINA")).Value)
        nombreEmp = CStr(wsBase.Cells(r, g_Config("BASE_COL_NOMBRE")).Value)
        If Len(Trim$(noNom)) > 0 And Len(Trim$(nombreEmp)) > 0 Then
            fila = BuscarFilaPorNoNom(wsMes, noNom, nombreEmp)
            wsMes.Cells(fila, 1).Value = noNom
            wsMes.Cells(fila, 2).Value = nombreEmp
        End If
    Next r
End Sub

Private Function BuscarFilaPorNoNom(ws As Worksheet, noNom As String, nom As String) As Long
    Dim ult As Long: ult = LastUsedRow(ws)
    Dim i As Long
    For i = 2 To ult
        If NomKey(ws.Cells(i, 1).Value) = NomKey(noNom) Then
            BuscarFilaPorNoNom = i: Exit Function
        End If
    Next i
    BuscarFilaPorNoNom = ult + 1
    ws.Cells(ult + 1, 1).Value = noNom
    ws.Cells(ult + 1, 2).Value = nom
End Function

Private Function GetOrCreateWeekBlock(wsMes As Worksheet, semanaNum As Long, mondayDate As Date, sundayDate As Date) As Long
    Dim lastCol As Long: lastCol = wsMes.Cells(1, wsMes.Columns.count).End(xlToLeft).Column
    Dim c As Long
    For c = 3 To IIf(lastCol < 3, 3, lastCol) Step 7
        If UCase$(CStr(wsMes.Cells(1, c).Value)) = "SEM " & CStr(semanaNum) Then
            GetOrCreateWeekBlock = c
            Exit Function
        End If
    Next c
    If lastCol < 2 Then lastCol = 2
    GetOrCreateWeekBlock = lastCol + 1
    With wsMes.Range(wsMes.Cells(1, GetOrCreateWeekBlock), wsMes.Cells(1, GetOrCreateWeekBlock + 6))
        .Merge
        .Value = "SEM " & semanaNum
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .Font.Bold = True
        .Interior.Color = RGB(200, 200, 200)
    End With
    Dim letras As Variant: letras = Array("L", "M", "M", "J", "V", "S", "D")
    Dim i As Long
    For i = 0 To 6
        With wsMes.Cells(2, GetOrCreateWeekBlock + i)
            .Value = letras(i) & " " & Day(mondayDate + i)
            .HorizontalAlignment = xlCenter
            .Interior.Color = RGB(217, 217, 217)
            .Font.Bold = True
        End With
    Next i
End Function

'==============================================
'======== DASHBOARD ===========================
'==============================================
Private Sub ActualizarDashboard(wsRep As Worksheet, semanaNum As Long)
    Dim wsDash As Worksheet
    On Error Resume Next
    Set wsDash = ThisWorkbook.Worksheets("Dashboard")
    On Error GoTo 0
    If wsDash Is Nothing Then Exit Sub

    '--- 1. Resumen de incidencias
    Dim dictInc As Object: Set dictInc = CreateObject("Scripting.Dictionary")
    dictInc.CompareMode = vbTextCompare
    Dim ultFila As Long: ultFila = wsRep.Cells(wsRep.Rows.count, g_Config("COL_NO_NOM")).End(xlUp).Row
    Dim r As Long, c As Long
    Dim val As String
    For r = 2 To ultFila
        For c = g_Config("COL_L") To g_Config("COL_L") + 6
            val = CStr(wsRep.Cells(r, c).Value)
            If val <> "" And val <> "A" And val <> "D" And IsError(val) = False Then
                If Not dictInc.Exists(val) Then
                    dictInc.Add val, 1
                Else
                    dictInc(val) = dictInc(val) + 1
                End If
            End If
        Next c
    Next r

    '--- 2. Actualizar KPIs
    wsDash.Range("F2").Value = semanaNum
    wsDash.Range("F3").Value = ultFila - 1
    wsDash.Range("F4").Value = Application.WorksheetFunction.Sum(wsRep.Columns(g_Config("COL_HX")))

    '--- 3. Volcar datos y actualizar Gráfico
    wsDash.Range("A2:B15").ClearContents
    Dim ch As ChartObject
    On Error Resume Next
    Set ch = wsDash.ChartObjects("chtIncidencias")
    On Error GoTo 0

    If dictInc.count > 0 Then
        Dim k As Variant, i As Long: i = 2
        For Each k In dictInc.Keys
            wsDash.Cells(i, 1).Value = k
            wsDash.Cells(i, 2).Value = dictInc(k)
            i = i + 1
        Next k

        If Not ch Is Nothing Then
            ch.Chart.SetSourceData Source:=wsDash.Range("A1:B" & i - 1)
            ch.Chart.ChartTitle.Text = "Resumen de Incidencias - Semana " & semanaNum
            ch.Visible = True
        End If
    Else
        wsDash.Range("A2").Value = "No se registraron incidencias"
        If Not ch Is Nothing Then
            On Error Resume Next
            ch.Chart.SetSourceData Source:=wsDash.Range("A1")
            ch.Chart.ChartTitle.Text = "Sin Incidencias - Semana " & semanaNum
            On Error GoTo 0
        End If
    End If
End Sub

'==============================================
'======== ASIGNAR HX (CORREGIDA) ==============
'==============================================
Public Sub Paso1_AsignarHorasExtra()
    ' --- 1. Cargar Configuración ---
    If g_Config Is Nothing Then
        If Not LoadConfiguration() Then Exit Sub
    End If

    Dim wsRol As Worksheet, wsInc As Worksheet
    On Error Resume Next
    Set wsRol = ThisWorkbook.Worksheets("rol_horas_extra")
    Set wsInc = ThisWorkbook.Worksheets(g_Config("SH_INC"))
    On Error GoTo 0

    If wsRol Is Nothing Then
        MsgBox "Error: No se encontró la hoja 'rol_horas_extra'.", vbCritical
        Exit Sub
    End If
    If wsInc Is Nothing Then
        MsgBox "Error: No se encontró la hoja 'registro_incidencias'.", vbCritical
        Exit Sub
    End If

    Application.ScreenUpdating = False
    On Error GoTo AsignarHX_Error

    ' --- 2. Obtener Semana y Fechas ---
    Dim semanaNum As Long, anioSel As Long, tmp As String
    Do
        tmp = InputBox("Ingresa el NÚMERO de semana (1-53) para ASIGNAR Horas Extra:", "Semana", Application.WorksheetFunction.weekNum(Date, 2))
        If Len(Trim$(tmp)) = 0 Then GoTo AsignarHX_Salida ' User cancelled
        If IsNumeric(tmp) Then
            semanaNum = CLng(tmp)
            If semanaNum >= 1 And semanaNum <= 53 Then Exit Do
        End If
        MsgBox "Por favor, ingresa un número de semana válido (entre 1 y 53).", 48, "Entrada no válida"
    Loop
    tmp = InputBox("Ingresa el AÑO (4 dígitos).", "Año", Year(Date))
    If Len(Trim$(tmp)) = 0 Or Not IsNumeric(tmp) Then GoTo AsignarHX_Salida
    anioSel = CLng(tmp)
    
    Dim mondayDate As Date: mondayDate = MondayOfISOWeek(semanaNum, anioSel)
    Dim sundayDate As Date: sundayDate = mondayDate + 6

    ' --- 3. Leer el Switch de Rotación ---
    Dim rotacion As String: rotacion = UCase(Trim(wsRol.Range("A1").Value))
    Dim colNombre As Long, colNomina As Long, colStartDia As Long
    
    If rotacion = "A" Then ' Lunes Miercoles - Usa la tabla de la izquierda
        colNomina = 1  ' Col A
        colNombre = 2  ' Col B
        colStartDia = 3 ' Col C (Lunes)
    ElseIf rotacion = "B" Then ' Martes Jueves - Usa la tabla de la derecha
        colNomina = 11 ' Col K
        colNombre = 12 ' Col L
        colStartDia = 13 ' Col M (Lunes)
    Else
        MsgBox "Error: El valor en la celda A1 de 'rol_horas_extra' debe ser 'A' o 'B'.", vbCritical
        GoTo AsignarHX_Salida
    End If
    
    ' --- 4. *** CORRECCIÓN: Limpiar HX existentes para esta semana *** ---
    ' Esto previene el registro duplicado si la macro se corre varias veces
    Dim rDel As Long
    Dim ultDel As Long: ultDel = LastUsedRow(wsInc)
    If ultDel >= 2 Then
        Application.EnableEvents = False
        For rDel = ultDel To 2 Step -1
            If IsDate(wsInc.Cells(rDel, g_Config("INC_COL_FECHA")).Value) Then
                Dim fechaDel As Date: fechaDel = CDate(wsInc.Cells(rDel, g_Config("INC_COL_FECHA")).Value)
                Dim tipoDel As String: tipoDel = CStr(wsInc.Cells(rDel, g_Config("INC_COL_TIPO")).Value)
                
                ' Solo borra "Horas Extra" DENTRO del rango de la semana
                If tipoDel = "Horas Extra" And fechaDel >= mondayDate And fechaDel <= sundayDate Then
                    wsInc.Rows(rDel).Delete
                End If
            End If
        Next rDel
        Application.EnableEvents = True
    End If
    ' --- FIN DE LA CORRECCIÓN ---

    ' --- 5. Acopiar todas las Faltas de esa semana ---
    Dim dictFaltas As Object: Set dictFaltas = CreateObject("Scripting.Dictionary")
    dictFaltas.CompareMode = vbTextCompare
    Dim incArr As Variant: incArr = RangoDatos(wsInc)
    
    If Not IsEmpty(incArr) Then
        Dim i As Long
        For i = LBound(incArr, 1) To UBound(incArr, 1)
            Dim incProps As Object: Set incProps = GetIncidenceProps(CStr(incArr(i, g_Config("INC_COL_TIPO"))))
            If Not incProps Is Nothing Then
                If incProps("Abreviatura_Reporte") = "F" Then ' "F" es la abreviatura de Falta
                    If IsDate(incArr(i, g_Config("INC_COL_FECHA"))) Then
                        Dim faltaFecha As Date: faltaFecha = CDate(incArr(i, g_Config("INC_COL_FECHA")))
                        If faltaFecha >= mondayDate And faltaFecha <= sundayDate Then
                            Dim faltaKey As String: faltaKey = NomKey(incArr(i, g_Config("INC_COL_NOM")))
                            If Len(faltaKey) > 0 Then
                                If Not dictFaltas.Exists(faltaKey) Then
                                    dictFaltas.Add faltaKey, faltaFecha
                                Else
                                    If faltaFecha < dictFaltas(faltaKey) Then
                                        dictFaltas(faltaKey) = faltaFecha
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Next i
    End If

    ' --- 6. Procesar la tabla de roles ---
    Dim r As Long, ultFilaRol As Long
    ultFilaRol = wsRol.Cells(wsRol.Rows.count, colNombre).End(xlUp).Row
    Dim incNextRow As Long: incNextRow = LastUsedRow(wsInc) + 1
    Dim hxRegistradas As Long: hxRegistradas = 0

    For r = 2 To ultFilaRol
        Dim nombre As String: nombre = wsRol.Cells(r, colNombre).Value
        Dim noNomKey As String: noNomKey = NomKey(wsRol.Cells(r, colNomina).Value)
        
        If Len(noNomKey) > 0 And Len(nombre) > 0 Then
            Dim haFaltado As Boolean: haFaltado = dictFaltas.Exists(noNomKey)
            Dim fechaPrimeraFalta As Date
            If haFaltado Then fechaPrimeraFalta = dictFaltas(noNomKey)

            Dim d As Long
            For d = 0 To 5 ' 0=Lunes, 1=Martes, ..., 5=Sabado
                Dim turno As String: turno = UCase(Trim(CStr(wsRol.Cells(r, colStartDia + d).Value)))
                Dim horasHX As Long: horasHX = 0
                
                If turno = "1º" Then
                    horasHX = 8
                ElseIf turno = "2º" Then
                    horasHX = 4
                End If

                If horasHX > 0 Then
                    Dim fechaHX As Date: fechaHX = mondayDate + d
                    Dim registrarHX As Boolean: registrarHX = True

                    If haFaltado Then
                        If fechaPrimeraFalta <= fechaHX Then
                            registrarHX = False
                        End If
                    End If

                    If registrarHX Then
                        wsInc.Cells(incNextRow, g_Config("INC_COL_FECHA")).Value = fechaHX
                        wsInc.Cells(incNextRow, g_Config("INC_COL_NOM")).Value = wsRol.Cells(r, colNomina).Value
                        wsInc.Cells(incNextRow, g_Config("INC_COL_NOMBRE")).Value = nombre
                        wsInc.Cells(incNextRow, g_Config("INC_COL_TIPO")).Value = "Horas Extra"
                        wsInc.Cells(incNextRow, g_Config("INC_COL_CANT")).Value = horasHX
                        incNextRow = incNextRow + 1
                        hxRegistradas = hxRegistradas + 1
                    End If
                End If
            Next d
        End If
    Next r

    ' --- 7. Rotar el Switch para la siguiente semana ---
    If rotacion = "A" Then
        wsRol.Range("A1").Value = "B"
    Else
        wsRol.Range("A1").Value = "A"
    End If
    
    Application.ScreenUpdating = True
    MsgBox "Proceso completado." & vbCrLf & _
           "Se registraron " & hxRegistradas & " turnos de Horas Extra." & vbCrLf & _
           "La rotación se cambió a: " & UCase(wsRol.Range("A1").Value), vbInformation
    
AsignarHX_Salida:
    Application.ScreenUpdating = True
    Exit Sub
    
AsignarHX_Error:
    Application.ScreenUpdating = True
    MsgBox "Ocurrió un error inesperado en 'Paso1_AsignarHorasExtra'." & vbCrLf & _
           "Número: " & Err.Number & vbCrLf & _
           "Descripción: " & Err.Description, vbCritical, "Error en Macro"
End Sub

'================================================================
'======== NUEVAS FUNCIONES PARA HISTÓRICO Y BONO MENSUAL ========
'================================================================

' Se asegura que la hoja 'historico_incidencias' exista
Private Sub EnsureHistoricoSheet()
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets("historico_incidencias")
    On Error GoTo 0
    
    If ws Is Nothing Then
        Set ws = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.count))
        ws.Name = "historico_incidencias"
        ' Ocultar la hoja
        ws.Visible = xlSheetVeryHidden
        ' Añadir encabezados
        ws.Cells(1, 1).Value = "Fecha"
        ws.Cells(1, 2).Value = "No_Nomina"
        ws.Cells(1, 3).Value = "Nombre"
        ws.Cells(1, 4).Value = "Tipo_Incidencia"
        ws.Cells(1, 5).Value = "Cantidad"
        ws.Cells(1, 6).Value = "Semana_Archivo"
        ws.Cells(1, 7).Value = "Anio_Archivo"
    End If
End Sub

' Archiva las incidencias y evita duplicados
Private Sub ActualizarHistoricoIncidencias(incArr As Variant, ByVal semanaNum As Long, ByVal anioSel As Long)
    Dim wsHist As Worksheet
    Set wsHist = ThisWorkbook.Worksheets("historico_incidencias")
    
    Dim r As Long, ultHist As Long
    ultHist = LastUsedRow(wsHist)
    
    ' 1. Borrar registros existentes de esta semana para evitar duplicados
    If ultHist >= 2 Then
        Application.EnableEvents = False ' Desactiva eventos para borrado rápido
        For r = ultHist To 2 Step -1
            If wsHist.Cells(r, 6).Value = semanaNum And wsHist.Cells(r, 7).Value = anioSel Then
                wsHist.Rows(r).Delete
            End If
        Next r
        Application.EnableEvents = True
    End If
    
    If IsEmpty(incArr) Then Exit Sub
    
    ' 2. Añadir los nuevos registros (SOLO INCIDENCIAS REALES)
    ultHist = LastUsedRow(wsHist)
    Dim i As Long
    For i = LBound(incArr, 1) To UBound(incArr, 1)
        Dim tipoInc As String: tipoInc = CStr(incArr(i, g_Config("INC_COL_TIPO")))
        
        ' Si el tipo de incidencia está vacío, no es una incidencia real
        If Len(Trim(tipoInc)) > 0 Then
            Dim incProps As Object: Set incProps = GetIncidenceProps(tipoInc)
            
            ' CORRECCIÓN: Asegurarse de que incProps no sea Nothing
            If Not incProps Is Nothing Then
                Dim abreviatura As String
                abreviatura = incProps("Abreviatura_Reporte")
                
                ' CORRECCIÓN: Solo archivar si NO es Asistencia ("A") o Descanso ("D")
                If abreviatura <> "A" And abreviatura <> "D" Then
                    ultHist = ultHist + 1
                    wsHist.Cells(ultHist, 1).Value = incArr(i, g_Config("INC_COL_FECHA"))
                    wsHist.Cells(ultHist, 2).Value = incArr(i, g_Config("INC_COL_NOM"))
                    wsHist.Cells(ultHist, 3).Value = incArr(i, g_Config("INC_COL_NOMBRE"))
                    wsHist.Cells(ultHist, 4).Value = tipoInc
                    wsHist.Cells(ultHist, 5).Value = incArr(i, g_Config("INC_COL_CANT"))
                    wsHist.Cells(ultHist, 6).Value = semanaNum
                    wsHist.Cells(ultHist, 7).Value = anioSel
                End If
            ' CORRECCIÓN: Añadido Else por si el tipo no está en Config (ej. "Asistencia")
            ElseIf UCase(tipoInc) <> "ASISTENCIA" And UCase(tipoInc) <> "A" Then
                ' Registrarlo incluso si no está en config, excepto si es "Asistencia"
                ' (Asumiendo que 'A' o 'Asistencia' pueden aparecer y deben ser ignorados)
                ' Si "Asistencia" es un tipo válido, esta lógica debe cambiar
                
                ' -> Se elimina este Else. Si no está en Config, no es una incidencia válida
                '    y no debe ser archivado. La lógica de 'incProps Is Nothing' es suficiente.
            End If
        End If
    Next i
End Sub

' Limpia la hoja de registro de incidencias protegiendo fórmulas y fechas futuras
Private Sub LimpiarIncidenciasPasadas(wsInc As Worksheet, ByVal mondayDate As Date)
    Dim r As Long, ultInc As Long
    ultInc = LastUsedRow(wsInc)
    
    If ultInc < 2 Then Exit Sub
    
    Application.EnableEvents = False
    
    ' CORRECCIÓN: La fecha de corte es el SÁBADO de la semana pasada (mondayDate - 2)
    Dim cutoffDate As Date: cutoffDate = mondayDate - 2
    
    ' Recorrer de abajo hacia arriba para limpiar
    For r = ultInc To 2 Step -1
        Dim fechaCell As Variant
        fechaCell = wsInc.Cells(r, g_Config("INC_COL_FECHA")).Value
        
        ' Solo procesar si hay una fecha
        If IsDate(fechaCell) Then
            ' Si la incidencia es ANTERIOR al sábado de la semana pasada, limpiarla
            If CDate(fechaCell) < cutoffDate Then
                ' CORRECCIÓN: Borrar Col A, B, D, E. Proteger Col C.
                wsInc.Cells(r, g_Config("INC_COL_FECHA")).ClearContents  ' Col A
                wsInc.Cells(r, g_Config("INC_COL_NOMBRE")).ClearContents ' Col B (Nombre)
                ' Se omite g_Config("INC_COL_NOM") (Col C - Fórmula)
                wsInc.Cells(r, g_Config("INC_COL_TIPO")).ClearContents   ' Col D
                wsInc.Cells(r, g_Config("INC_COL_CANT")).ClearContents  ' Col E
            End If
        End If
    Next r
    
    Application.EnableEvents = True
End Sub
